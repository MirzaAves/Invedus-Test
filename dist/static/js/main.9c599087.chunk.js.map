{"version":3,"sources":["components/layout/Navbar.tsx","components/ui/ButtonSave.tsx","firebaseConfig.js","components/contact/CreateEdit.tsx","components/contact/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","className","id","to","React","ButtonSave","this","props","isSaving","onClick","triggerParent","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","getStorage","CreateEditContact","state","submit","setState","contactId","contact","contacts","localStorage","getItem","temp","JSON","parse","val","firstname","phone","iswhatsapp","type","profile_pic","setItem","stringify","cancelIsSavingState","history","push","uuid","handleInputChanges","e","currentTarget","name","value","checked","getContactById","match","params","find","x","console","log","target","files","alert","storageRef","ref","uploadTask","uploadBytesResumable","on","snapshot","err","getDownloadURL","then","url","onChange","required","uploadPic","ListOfContact","show","getContacts","response","i","length","splice","window","confirm","deleteContact","map","key","src","height","width","handleModal","App","path","exact","component","Component","withRouter","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c599087.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class NavBar extends React.Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar is-light\">\n                    <div className=\"navbar-brand\">\n                        {/* <a className=\"navbar-item\">\n                            Logo here\n                        </a>\n\n                        <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\" href=\"#\">\n                            <span aria-hidden=\"true\"></span>\n                            <span aria-hidden=\"true\"></span>\n                            <span aria-hidden=\"true\"></span>\n                        </a> */}\n                    </div>\n\n                    <div id=\"navbarExampleTransparentExample\" className=\"navbar-menu\">\n                        <div className=\"navbar-end\">\n                            {/* <Link to={'/'} className=\"navbar-item\"> Home</Link> */}\n                            <Link to={'/contact'} className=\"navbar-item\"> Contacts</Link>\n                            <div className=\"navbar-item\">\n                                {/* <div className=\"field is-grouped\">\n                                    <p className=\"control\">\n                                        <a className=\"button is-info\" href=\"#\">\n                                            Store App\n                                        </a>\n                                    </p>\n                                </div> */}\n                            </div>\n                        </div>\n                    </div>\n                </nav>\n            </div >\n        )\n    }\n}","import * as React from 'react'\n\ninterface IProps {\n    isSaving: boolean\n    triggerParent: any\n}\n\nexport default class ButtonSave extends React.Component<IProps> {\n    render() {\n        return (\n            <button className={this.props.isSaving\n                 ? 'button is-success is-loading'\n                  : 'button is-success'} onClick={this.props.triggerParent}>Submit</button>\n        )\n    }\n}","import { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\n \n// Initialize Firebase\nconst app = initializeApp ({\n    apiKey: \"AIzaSyCqInA3rpAknJT8bXOEyRWkVCnpMVajM-E\",\n    authDomain: \"inved-test.firebaseapp.com\",\n    projectId: \"inved-test\",\n    storageBucket: \"inved-test.appspot.com\",\n    messagingSenderId: \"911022250220\",\n    appId: \"1:911022250220:web:3db80501becf3617b6adc9\",\n    measurementId: \"G-0L83H8CE2K\"\n});\n \n// Firebase storage reference\nconst storage = getStorage(app);\nexport default storage;","import * as React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { uuid } from \"uuidv4\";\nimport ButtonSave from \"../ui/ButtonSave\";\nimport storage from \"../../firebaseConfig\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n\ninterface IOwnProps {}\n\ninterface IRouteProps {\n  contactId: any;\n}\n\ninterface IContact {\n  contactId: string;\n  firstname: string;\n  phone: string;\n  type: string;\n  iswhatsapp: boolean;\n  profile_pic: string;\n}\n\ninterface ICustomerState {\n  contact: IContact;\n  isSaving: boolean;\n}\n\nexport default class CreateEditContact extends React.Component<\n  IOwnProps & RouteComponentProps<IRouteProps>,\n  ICustomerState\n> {\n  state: ICustomerState;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      contact: {\n        contactId: \"\",\n        firstname: \"\",\n        phone: \"\",\n        type: \"\",\n        iswhatsapp: false,\n        profile_pic: \"\",\n      },\n      isSaving: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getContactById(this.props.match.params.contactId);\n  }\n\n  submit = () => {\n    this.setState({ isSaving: true });\n    debugger;\n    const contactId = this.state.contact.contactId;\n    if (contactId !== \"\") {\n      const contacts = localStorage.getItem(\"contacts\");\n      if (contacts) {\n        const temp: IContact[] = JSON.parse(contacts);\n        for (const val of temp) {\n          if (val.contactId === contactId) {\n            val.firstname = this.state.contact.firstname;\n            val.phone = this.state.contact?.phone;\n            val.iswhatsapp = this.state.contact?.iswhatsapp;\n            val.type = this.state.contact?.type;\n            val.profile_pic = this.state.contact?.profile_pic;\n          }\n        }\n        localStorage.setItem(\"contacts\", JSON.stringify(temp));\n      }\n      this.cancelIsSavingState();\n      this.props.history.push(\"/contact\");\n    } else {\n      // CREATE\n      const contacts = localStorage.getItem(\"contacts\");\n      this.state.contact.contactId = uuid();\n      if (contacts) {\n        const temp: Record<string, string | number | boolean>[] =\n          JSON.parse(contacts);\n        temp.push({ ...this.state.contact });\n        localStorage.setItem(\"contacts\", JSON.stringify(temp));\n      } else {\n        localStorage.setItem(\n          \"contacts\",\n          JSON.stringify([{ ...this.state.contact }])\n        );\n      }\n\n      this.cancelIsSavingState();\n      this.props.history.push(\"/contact\");\n    }\n  };\n\n  // this to prevent memory leak if the loading is not stop before the this.props.history.push is called\n  cancelIsSavingState(): void {\n    this.setState({ isSaving: false });\n  }\n\n  getContactById(id: string): void {\n    if (id) {\n      const contacts = localStorage.getItem(\"contacts\");\n      if (contacts) {\n        const temp: IContact[] = JSON.parse(contacts);\n        const val = temp.find((x) => x.contactId === id);\n        if (val)\n          this.setState({\n            contact: val,\n          });\n      }\n    }\n  }\n\n  handleInputChanges = (e: any) => {\n    if(e.currentTarget.name === 'iswhatsapp'){\n      // e.currentTarget.checked = !e.currentTarget.checked\n      this.setState({\n        ...this.state,\n        contact: {\n          ...this.state.contact,\n          [e.currentTarget.name]: e.currentTarget.checked,\n        },\n      });\n      return;\n    }\n    this.setState({\n      ...this.state,\n      contact: {\n        ...this.state.contact,\n        [e.currentTarget.name]: e.currentTarget.value,\n      },\n    });\n  };\n\n  uploadPic(e: any) {\n    console.log(e.target.files[0]);\n    if (!e.target.files[0]) {\n      alert(\"Please upload an image first!\");\n    }\n    const storageRef = ref(storage, `/files/${e.target.files[0].name}`);\n    // progress can be paused and resumed. It also exposes progress updates.\n    // Receives the storage reference and the file to upload.\n    const uploadTask = uploadBytesResumable(storageRef, e.target.files[0]);\n\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        // update progress\n      },\n      (err) => console.log(err),\n      () => {\n        // download url\n        getDownloadURL(uploadTask.snapshot.ref).then((url) => {\n          console.log(url);\n          this.setState({\n            ...this.state,\n            contact: {\n              ...this.state.contact,\n              [\"profile_pic\"]: url,\n            },\n          });\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"title is-3\">\n          {this.state.contact.contactId !== \"\" ? \"Edit\" : \"Create\"} Contact\n        </h3>\n        <div className=\"columns\">\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Name</label>\n              <div className=\"control\">\n                <input\n                  name=\"firstname\"\n                  value={this.state.contact.firstname || \"\"}\n                  onChange={(e) => this.handleInputChanges(e)}\n                  type=\"text\"\n                  className=\"input\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Phone</label>\n              <div className=\"control\">\n                <input\n                  name=\"phone\"\n                  value={this.state.contact.phone || \"\"}\n                  onChange={(e) => this.handleInputChanges(e)}\n                  type=\"text\"\n                  className=\"input\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Type</label>\n              <div className=\"control\">\n                <select\n                  className=\"input\"\n                  name=\"type\"\n                  required\n                  value={this.state.contact.type || \"\"}\n                  onChange={(e) => this.handleInputChanges(e)}\n                >\n                  <option value=\"Office\">Office</option>\n                  <option value=\"Personal\">Personal</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"field\">\n              <div className=\"control\">\n                <label className=\"label\">is What's App</label>\n                <input\n                  type=\"checkbox\"\n                  required\n                  name=\"iswhatsapp\"\n                  checked={this.state.contact.iswhatsapp}\n                  onChange={(e) => this.handleInputChanges(e)}\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Profile Pic</label>\n              <div className=\"control\">\n                <input\n                  type=\"file\"\n                  required\n                  name=\"profile_pic\"\n                  onChange={(e) => this.uploadPic(e)}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\"></div>\n        </div>\n        <div className=\"level\">\n          <div className=\"level-left\">\n            <ButtonSave\n              isSaving={this.state.isSaving}\n              triggerParent={this.submit}\n            />\n            &nbsp;\n            <Link to={\"/contact\"} className=\"button\">\n              Go back\n            </Link>\n          </div>\n          <div className=\"level-right\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport \"../../App.css\";\nimport { Button, Modal } from \"react-bootstrap\";\n\ninterface IState {\n  contact: any[];\n  show: boolean;\n}\n\nexport default class ListOfContact extends React.Component<\n  RouteComponentProps,\n  IState\n> {\n  componentDidMount() {\n    this.getContacts();\n  }\n\n  state: IState = {\n    contact: [],\n    show: false,\n  };\n\n  getContacts(): void {\n    const response = localStorage.getItem(\"contacts\");\n    if (response) {\n      this.setState({\n        contact: JSON.parse(response),\n      });\n    }\n  }\n\n  deleteContact(contactId: string): void {\n    if (contactId) {\n      const contacts = localStorage.getItem(\"contacts\");\n      if (contacts) {\n        const temp: Record<string, string | number>[] = JSON.parse(contacts);\n        for (let i = 0; i < temp.length; i++) {\n          if (temp[i].contactId === contactId) {\n            temp.splice(i, 1);\n          }\n        }\n        localStorage.setItem(\"contacts\", JSON.stringify(temp));\n        this.getContacts();\n      }\n    }\n  }\n  \n  handleModal(id: string) {\n    const flag = window.confirm(\"Are you sure you want to delete?\");\n    if (flag) {\n      this.deleteContact(id);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"title is-3\">Contacts</h3>\n        <Link to={\"/contact/create\"} className=\"button is-link\">\n          Create new\n        </Link>\n        <hr />\n        <table className=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\n          <thead>\n            <tr>\n              <th>Contact ID</th>\n              <th>Name</th>\n              <th>Phone</th>\n              <th>Type</th>\n              <th>What's App</th>\n              <th>Profile Pic</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.contact.map((contact, i) => (\n              <tr key={i}>\n                <td>{contact.contactId}</td>\n                <td>{contact.firstname}</td>\n                <td>{contact.phone}</td>\n                <td>{contact.type}</td>\n                <td>{contact.iswhatsapp ? \"True\" : \"False\"}</td>\n                <td>\n                  <img src={contact.profile_pic} height={100} width={100} />\n                </td>\n\n                <td>\n                  <Link\n                    to={`/contact/edit/${contact.contactId}`}\n                    className=\"button is-warning\"\n                  >\n                    Edit\n                  </Link>\n                  &nbsp;\n                  <button\n                    className=\"button is-danger\"\n                    onClick={() => this.handleModal(contact.contactId)}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Switch, Route, withRouter, RouteComponentProps } from 'react-router-dom';\nimport NavBar from './components/layout/Navbar';\nimport Home from './components/Home';\nimport CreateEditContact from './components/contact/CreateEdit';\nimport ListOfContact from './components/contact/List';\n\nclass App extends React.Component<RouteComponentProps<any>> {\n  public render() {\n    return (\n      <div>\n        <NavBar />\n        <br />\n        <div className=\"container\">\n          <Switch>\n            <Route path={'/'} exact component={ListOfContact} />\n            <Route path={'/contact'} exact component={ListOfContact} />\n            <Route path={'/contact/create'} exact component={CreateEditContact} />\n            <Route path={'/contact/edit/:contactId'} exact component={CreateEditContact} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import style\nimport \"../node_modules/bulma/css/bulma.min.css\"\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}